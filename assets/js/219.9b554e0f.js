(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{568:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-大整数相加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-大整数相加"}},[t._v("#")]),t._v(" JS - 大整数相加")]),t._v(" "),a("blockquote",[a("p",[t._v("将代码复制到浏览器"),a("code",[t._v("console")]),t._v("运行是最快的速度")])]),t._v(" "),a("h2",{attrs:{id:"前置知识-jsbits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识-jsbits"}},[t._v("#")]),t._v(" 前置知识 - JSBITS")]),t._v(" "),a("p",[t._v("JS中数据以 "),a("strong",[t._v("8字节存储")]),t._v("，1个字节代表8bit。也就是一共64个0。字节、bits之间关系可以看"),a("a",{attrs:{href:"https://blog.csdn.net/cx_wzp/article/details/8104224",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。也就是说JS中最大数应该只能是"),a("code",[t._v("2^63-1")]),t._v("。"),a("strong",[t._v("但其实不是")]),t._v("，正如同"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000002608050",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章"),a("OutboundLink")],1),t._v("所说的，JS对"),a("code",[t._v("double")]),t._v("浮点数的处理有所不同，我能够用到只有"),a("code",[t._v("53")]),t._v("。所以应该是"),a("code",[t._v("2^53-1")]),t._v("。可以再浏览器"),a("code",[t._v("console")]),t._v("通过"),a("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("查看。具体分析见"),a("a",{attrs:{href:"https://github.com/JiangWeixian/JS-Tips/blob/master/docs/Grammar/JS-Number-maxvalue%E7%9B%B8%E5%85%B3.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS-数据存储"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("因此，对于大于"),a("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("的操作符运算基本可以可以算作是大数了，对于以上的数据，运算可能正确也可能错误。")]),t._v(" 所以即使某些操作上是运算正确的，都要避免这么做。")]),t._v(" "),a("h2",{attrs:{id:"大数相加思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大数相加思路"}},[t._v("#")]),t._v(" 大数相加思路")]),t._v(" "),a("p",[t._v("实现大整数相加有两种方法，讲其转换为二进制进行操作是比较优雅的。另一种折中的方法是，先将大数据转化为字符串数组，同时变成相同的长度（也就是再数组某些位置需要补零）。然后对应位置相加 "),a("strong",[t._v("注意超过10就要进一位的问题")])]),t._v(" "),a("p",[t._v("再JS中进行BITS操作并不常见，但是的确提供这样的结果，"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#Bitwise_operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN上关于位操作符的定义"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"上代码！"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上代码！"}},[t._v("#")]),t._v(" 上代码！")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("~")]),t._v("操作符是按位非，"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000003731938",target:"_blank",rel:"noopener noreferrer"}},[t._v("解析在这"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("code",[t._v("~data = -(data+1)")]),t._v(" "),a("ul",[a("li",[t._v("得到的结果都要变为整数。向下取整"),a("code",[t._v("5.9 -> 5")])]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("data")]),t._v("并不是整数之类的，就要进行类型转化使其能够相加，一般是"),a("code",[t._v("toSting()")]),t._v("。就像是"),a("code",[t._v("undefined+1")]),t._v("，对于"),a("code",[t._v("~undefined")]),t._v("转换步骤为"),a("code",[t._v("undefined->toString()=NaN->NaN+1=NaN")]),t._v("。"),a("strong",[t._v("但是在这明显不成立！")]),t._v("，因为记住这是位运算，所以"),a("code",[t._v("+1")]),t._v("是bits操作，"),a("code",[t._v("undefined")]),t._v("的操作应该是"),a("code",[t._v("Boolean(undefined)=0")])])])]),t._v(" "),a("li",[a("code",[t._v("~~data")]),t._v(" 可以先进行一次"),a("code",[t._v("~")]),t._v("然后在进行一次"),a("code",[t._v("~")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sumStrings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^0+/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("输入"),a("code",[t._v("a or b")]),t._v("都是字符串")]),t._v(" "),a("li",[a("code",[t._v("~~")]),t._v("在其中的主要目的就是取整（这是"),a("code",[t._v("~")]),t._v("很重要的一个功能）")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("a b")]),t._v("长度不一怎么办，那么"),a("code",[t._v("pop")]),t._v("就会弹出"),a("code",[t._v("undefined")]),t._v("，得到"),a("code",[t._v("~~undefineds")]),t._v("结果应该是"),a("code",[t._v("0")])]),t._v(" "),a("li",[t._v("只有对"),a("code",[t._v("c")]),t._v("取余数并判断是否进一位")])])])}),[],!1,null,null,null);s.default=e.exports}}]);