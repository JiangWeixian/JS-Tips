(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{422:function(r,e,v){"use strict";v.r(e);var _=v(0),t=Object(_.a)({},(function(){var r=this,e=r.$createElement,v=r._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[v("h1",{attrs:{id:"中介者模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[r._v("#")]),r._v(" 中介者模式")]),r._v(" "),v("blockquote",[v("p",[r._v("喂！114吗？")])]),r._v(" "),v("h2",{attrs:{id:"什么是中介者模式？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是中介者模式？"}},[r._v("#")]),r._v(" 什么是中介者模式？")]),r._v(" "),v("p",[r._v("对象和对象之间可能存在依赖关系("),v("strong",[r._v("一旦我改变你也改变那种")]),r._v(")，一旦对象多起来之后。")]),r._v(" "),v("p",[r._v("依赖就会比较严重，难免会发生牵一发而动全身得情况。")]),r._v(" "),v("p",[r._v("因此最好得办法是"),v("strong",[r._v("中介者")]),r._v("，")]),r._v(" "),v("ul",[v("li",[r._v("中介者管理所有得对象状态")]),r._v(" "),v("li",[r._v("每个模块都和这个中介者联系。由它来通知所有其余模块。")])]),r._v(" "),v("h2",{attrs:{id:"实现逻辑"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现逻辑"}},[r._v("#")]),r._v(" 实现逻辑")]),r._v(" "),v("p",[r._v("实现中介者模式，在playerDirector中开放一些接收消息的接口，各player可以直接调用该接口来给 playerDirector发送消息，player只需传递一个参数给playerDirector，这个参数的目的 是使playerDirector可以识别发送者。同样，playerDirector 接收到消息之后会将处理结 果反馈给其他player。")]),r._v(" "),v("p",[r._v("其中"),v("code",[r._v("playerDirector")]),r._v("是中介，而"),v("code",[r._v("player")]),r._v("则是就是对象。")]),r._v(" "),v("ol",[v("li",[v("code",[r._v("playerDirector")]),r._v("管理"),v("code",[r._v("player")]),r._v("对象。每次"),v("code",[r._v("player")]),r._v("触发事件都会向"),v("code",[r._v("playerDirector")]),r._v("发送信号。")]),r._v(" "),v("li",[v("code",[r._v("playerDirector")]),r._v("接受信号之后，处理，并通知其余"),v("code",[r._v("player")]),r._v("。通知得方式就是调用"),v("code",[r._v("player")]),r._v("其中方法。")])]),r._v(" "),v("p",[r._v("因此中介者是将对象"),v("strong",[r._v("所有得业务逻辑")]),r._v("都移动到自身，而对象知识保留着改变自身状态得接口，不负责改变状态之后得逻辑。")])])}),[],!1,null,null,null);e.default=t.exports}}]);