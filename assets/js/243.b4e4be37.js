(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{570:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js-大整数相加"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-大整数相加","aria-hidden":"true"}},[t._v("#")]),t._v(" JS - 大整数相加")]),t._v(" "),s("blockquote",[s("p",[t._v("将代码复制到浏览器"),s("code",[t._v("console")]),t._v("运行是最快的速度")])]),t._v(" "),s("h2",{attrs:{id:"前置知识-jsbits"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置知识-jsbits","aria-hidden":"true"}},[t._v("#")]),t._v(" 前置知识 - JSBITS")]),t._v(" "),s("p",[t._v("JS中数据以 "),s("strong",[t._v("8字节存储")]),t._v("，1个字节代表8bit。也就是一共64个0。字节、bits之间关系可以看"),s("a",{attrs:{href:"https://blog.csdn.net/cx_wzp/article/details/8104224",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("。也就是说JS中最大数应该只能是"),s("code",[t._v("2^63-1")]),t._v("。"),s("strong",[t._v("但其实不是")]),t._v("，正如同"),s("a",{attrs:{href:"https://segmentfault.com/a/1190000002608050",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章"),s("OutboundLink")],1),t._v("所说的，JS对"),s("code",[t._v("double")]),t._v("浮点数的处理有所不同，我能够用到只有"),s("code",[t._v("53")]),t._v("。所以应该是"),s("code",[t._v("2^53-1")]),t._v("。可以再浏览器"),s("code",[t._v("console")]),t._v("通过"),s("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("查看。具体分析见"),s("a",{attrs:{href:"https://github.com/JiangWeixian/JS-Tips/blob/master/docs/Grammar/JS-Number-maxvalue%E7%9B%B8%E5%85%B3.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS-数据存储"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("因此，对于大于"),s("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("的操作符运算基本可以可以算作是大数了，对于以上的数据，运算可能正确也可能错误。")]),t._v(" 所以即使某些操作上是运算正确的，都要避免这么做。")]),t._v(" "),s("h2",{attrs:{id:"大数相加思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大数相加思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 大数相加思路")]),t._v(" "),s("p",[t._v("实现大整数相加有两种方法，讲其转换为二进制进行操作是比较优雅的。另一种折中的方法是，先将大数据转化为字符串数组，同时变成相同的长度（也就是再数组某些位置需要补零）。然后对应位置相加 "),s("strong",[t._v("注意超过10就要进一位的问题")])]),t._v(" "),s("p",[t._v("再JS中进行BITS操作并不常见，但是的确提供这样的结果，"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#Bitwise_operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN上关于位操作符的定义"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"上代码！"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上代码！","aria-hidden":"true"}},[t._v("#")]),t._v(" 上代码！")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("~")]),t._v("操作符是按位非，"),s("a",{attrs:{href:"https://segmentfault.com/a/1190000003731938",target:"_blank",rel:"noopener noreferrer"}},[t._v("解析在这"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("code",[t._v("~data = -(data+1)")]),t._v(" "),s("ul",[s("li",[t._v("得到的结果都要变为整数。向下取整"),s("code",[t._v("5.9 -> 5")])]),t._v(" "),s("li",[t._v("如果"),s("code",[t._v("data")]),t._v("并不是整数之类的，就要进行类型转化使其能够相加，一般是"),s("code",[t._v("toSting()")]),t._v("。就像是"),s("code",[t._v("undefined+1")]),t._v("，对于"),s("code",[t._v("~undefined")]),t._v("转换步骤为"),s("code",[t._v("undefined->toString()=NaN->NaN+1=NaN")]),t._v("。"),s("strong",[t._v("但是在这明显不成立！")]),t._v("，因为记住这是位运算，所以"),s("code",[t._v("+1")]),t._v("是bits操作，"),s("code",[t._v("undefined")]),t._v("的操作应该是"),s("code",[t._v("Boolean(undefined)=0")])])])]),t._v(" "),s("li",[s("code",[t._v("~~data")]),t._v(" 可以先进行一次"),s("code",[t._v("~")]),t._v("然后在进行一次"),s("code",[t._v("~")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sumStrings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^0+/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("输入"),s("code",[t._v("a or b")]),t._v("都是字符串")]),t._v(" "),s("li",[s("code",[t._v("~~")]),t._v("在其中的主要目的就是取整（这是"),s("code",[t._v("~")]),t._v("很重要的一个功能）")]),t._v(" "),s("li",[t._v("如果"),s("code",[t._v("a b")]),t._v("长度不一怎么办，那么"),s("code",[t._v("pop")]),t._v("就会弹出"),s("code",[t._v("undefined")]),t._v("，得到"),s("code",[t._v("~~undefineds")]),t._v("结果应该是"),s("code",[t._v("0")])]),t._v(" "),s("li",[t._v("只有对"),s("code",[t._v("c")]),t._v("取余数并判断是否进一位")])])])},[],!1,null,null,null);a.default=e.exports}}]);