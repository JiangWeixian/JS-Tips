(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{466:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"flux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flux"}},[t._v("#")]),t._v(" Flux")]),t._v(" "),s("blockquote",[s("p",[t._v("flux其实就是store部分的内容。它解决了什么内容。")])]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("里面提到的一点十分赞同。异步获取数据的组件什么地方都可能用到，完全可以实现一种HOC组件，将异步获取的方式代理下来。")]),t._v(" "),s("p",[t._v("这样好处是：")]),t._v(" "),s("ol",[s("li",[t._v("组件就是组件，渲染数据")]),t._v(" "),s("li",[t._v("通过hoc方式，将异步的API传递进来。获取数据就能够通过hoc代理实现，然后将数据传递给组件然后渲染。")])]),t._v(" "),s("h2",{attrs:{id:"flux作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flux作用"}},[t._v("#")]),t._v(" Flux作用")]),t._v(" "),s("p",[t._v("其实flux的作用和前面的hoc的作用非常像。其实就是为了将数据和组件分离开来：组件就是为了展示数据，而复杂的逻辑（业务、也可以是后端的）交互就要交给"),s("code",[t._v("flux")]),t._v("进行处理。")]),t._v(" "),s("p",[s("strong",[t._v("处理完毕之后再通知组件就好了")])]),t._v(" "),s("h2",{attrs:{id:"flux单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flux单元测试"}},[t._v("#")]),t._v(" Flux单元测试")]),t._v(" "),s("p",[t._v("解释单元框架如何解决"),s("code",[t._v("store")]),t._v("的问题。")])])}),[],!1,null,null,null);a.default=e.exports}}]);