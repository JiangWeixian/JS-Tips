(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{392:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),s("blockquote",[s("p",[t._v("Cha 1th&Cha 2th&Cha 3th")])]),t._v(" "),s("h2",{attrs:{id:"静态语言类型和动态语言类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态语言类型和动态语言类型"}},[t._v("#")]),t._v(" 静态语言类型和动态语言类型")]),t._v(" "),s("p",[s("code",[t._v("JavaScript")]),t._v("是动态语言类型。")]),t._v(" "),s("h3",{attrs:{id:"鸭子类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#鸭子类型"}},[t._v("#")]),t._v(" 鸭子类型")]),t._v(" "),s("p",[t._v("只要是它长得像，叫的像那么它就是鸭子。不用关心它到底是不是。")]),t._v(" "),s("h3",{attrs:{id:"面向接口编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向接口编程"}},[t._v("#")]),t._v(" 面向接口编程")]),t._v(" "),s("blockquote",[s("p",[t._v("例如,一个对象若有push和 pop方法,并且这些方法提供了正确的实现,它就可以被当作栈来使用。")])]),t._v(" "),s("h2",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),s("ul",[s("li",[t._v("继承实现的多态，就像是动物可以是鸭子或者其他。这一点在静态类型中特别重要，因为不需要为一种特别的类型实现方法，只要实现其父类的方法就行了。")])]),t._v(" "),s("h3",{attrs:{id:"js-基于原型的语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-基于原型的语言"}},[t._v("#")]),t._v(" JS - 基于原型的语言")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("clone")]),t._v("是这类语言实现继承的方式")]),t._v(" "),s("li",[s("code",[t._v("JavaScript")]),t._v("的函数既可以作为普通函数被调用,也可以作为构造器被调用。当使用"),s("code",[t._v("new")]),t._v("运算符来调用函数时,此时的函数就是一个构造器。")])]),t._v(" "),s("h2",{attrs:{id:"this-call-apply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this-call-apply"}},[t._v("#")]),t._v(" this&call&apply")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("this")]),t._v("在函数运行的时候指定。")]),t._v(" "),s("li",[s("code",[t._v("apply&call")]),t._v(" - 改变"),s("code",[t._v("this")]),t._v("的指向。")])]),t._v(" "),s("h3",{attrs:{id:"bind"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[t._v("#")]),t._v(" bind")]),t._v(" "),s("p",[t._v("和"),s("code",[t._v("call")]),t._v("和"),s("code",[t._v("apply")]),t._v("区别在于，"),s("code",[t._v("bind")]),t._v("是返回一个函数，并不是立即执行。可以理解为"),s("code",[t._v("apply&bind")]),t._v("的柯里化实现。")]),t._v(" "),s("h2",{attrs:{id:"闭包和变量声明周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包和变量声明周期"}},[t._v("#")]),t._v(" 闭包和变量声明周期")]),t._v(" "),s("p",[s("strong",[t._v("首先")]),t._v("要知道JS只有函数生命周期而没有块的生命周期。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclick")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("每次之后弹出5")]),t._v(" "),s("p",[t._v("在"),s("strong",[t._v("你不知道JS")]),t._v("中的解释是，每次循环就只有一个变量"),s("code",[t._v("i")]),t._v("存在这个生命周期中。而"),s("code",[t._v("onclick")]),t._v("需要的是五个不同的变量。")]),t._v(" "),s("p",[s("code",[t._v("hack")]),t._v("方法就是对每个"),s("code",[t._v("onclick-function")]),t._v("绑定新的"),s("code",[t._v("i")]),t._v("到本身的生命周期上。非"),s("code",[t._v("ES6")]),t._v("的实现方案是：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    nodes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onclick "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这样"),s("code",[t._v("onclick")]),t._v("事件就有了存在其生命周期的变量"),s("code",[t._v("i")])]),t._v(" "),s("h3",{attrs:{id:"实现一个闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现一个闭包"}},[t._v("#")]),t._v(" 实现一个闭包")]),t._v(" "),s("ul",[s("li",[t._v("IIFE")]),t._v(" "),s("li",[t._v("或者就是函数内部返回一个函数")])]),t._v(" "),s("h3",{attrs:{id:"和内存关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和内存关系"}},[t._v("#")]),t._v(" 和内存关系")]),t._v(" "),s("p",[t._v("有一个观点就是闭包会造成内存消耗以及泄露，听起来很吓人")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("内存消耗的问题 - 如果讲这些变量放在闭包内部或者是全局中，都是一样的消耗")])]),t._v(" "),s("li",[s("p",[t._v("内存泄露的问题 -")]),t._v(" "),s("blockquote",[s("p",[t._v("如果闭包的作用域链中保存着一些DOM节点,这时候就有可能造成内存泄露;两个对象之间形成了循环引用存在内存泄漏")])]),t._v(" "),s("p",[t._v("但是以上问题都不是闭包引起的")])])]),t._v(" "),s("p",[t._v("JS内部有一个垃圾回收机制，就像名字那样会回收一些不使用的变量。")]),t._v(" "),s("p",[s("strong",[t._v("我们可以使用这个方法来避免垃圾回收，把那些不使用的变量设置为null就行了")])]),t._v(" "),s("h3",{attrs:{id:"节流-分时-预编译函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节流-分时-预编译函数"}},[t._v("#")]),t._v(" 节流&分时&预编译函数")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("节流函数 - 思想就是将一个函数延迟执行，在下一次需要再一次执行的时候。如果这个延迟函数存在，暂不执行。直到上一个延迟函数被执行完毕。")])]),t._v(" "),s("li",[s("p",[t._v("分时函数 - 例如当需要渲染一些列节点("),s("strong",[t._v("上千上百的时候")]),t._v(")。不再一次性渲染全部而是分阶段进行，每次渲染部分。直到全部完成。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("预编译函数")]),t._v(" - 在分析"),s("a",{attrs:{href:"https://github.com/JiangWeixian/JS-Tips/blob/master/Grammar/JS-%E9%97%AD%E5%8C%85-%E6%9F%AF%E9%87%8C%E5%8C%96.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("柯里化"),s("OutboundLink")],1),t._v("的时候有提到这一点的优势。")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);