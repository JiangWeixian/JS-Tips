(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{573:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ts-兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-兼容性"}},[t._v("#")]),t._v(" TS - 兼容性")]),t._v(" "),a("blockquote",[a("p",[t._v("指的是什么时候类型检查会报错，什么时候不会报错")])]),t._v(" "),a("h2",{attrs:{id:"非类类型兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非类类型兼容"}},[t._v("#")]),t._v(" 非类类型兼容")]),t._v(" "),a("p",[a("strong",[t._v("规则")]),t._v(" 如果是非类的类型，接口较少的可以赋值给接口较多的，接口较多无法赋值给接口较少的。")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("b")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("那么"),a("code",[t._v("a")]),t._v("可以赋值给"),a("code",[t._v("b")]),t._v("，但是"),a("code",[t._v("b")]),t._v("无法赋值给"),a("code",[t._v("a")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"关于类的兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于类的兼容性"}},[t._v("#")]),t._v(" 关于类的兼容性")]),t._v(" "),a("p",[t._v("类在没有实例化之前不存在，"),a("strong",[t._v("如果存在以上变量赋值情况，就不存在类型比较的情况。")])]),t._v(" "),a("p",[t._v("但是如果"),a("code",[t._v("class a or class b")]),t._v("被实例化了之后，接口比较和"),a("a",{attrs:{href:""}},[t._v("##非类类型兼容")]),t._v(" "),a("strong",[t._v("规则")]),t._v(" 一样。")]),t._v(" "),a("blockquote",[a("p",[t._v("类的私有成员和受保护成员会影响兼容性。 当检查类实例的兼容时，如果目标类型包含一个私有成员，那么源类型必须包含来自 "),a("strong",[t._v("同一个类")]),t._v(" 的这个私有成员。 同样地，这条规则也适用于包含受保护成员实例的类型检查。 这允许子类赋值给父类，但是不能赋值给其它有同样类型的类。")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("以上需要兼容性需要验证一下。")])])]),t._v(" "),a("p",[t._v("在"),a("a",{attrs:{href:""}},[t._v("lib-class-compatiable.ts")]),t._v("验证得到的结果的确是这样的！")])])}),[],!1,null,null,null);s.default=e.exports}}]);