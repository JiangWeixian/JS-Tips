(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{233:function(v,_,e){v.exports=e.p+"assets/img/diff2.7b622470.png"},294:function(v,_,e){"use strict";e.r(_);var t=e(0),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"vue-实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-实现原理"}},[v._v("#")]),v._v(" Vue - 实现原理")]),v._v(" "),t("blockquote",[t("p",[v._v("理解几个关键点！能力就那样，说的不好...")])]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#vue---%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"}},[v._v("Vue - 实现原理")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#11-kepoints"}},[v._v("1.1. Kepoints")])]),v._v(" "),t("li",[t("a",{attrs:{href:"#12-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86"}},[v._v("1.2. 前置知识")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#121-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%E5%8F%91%E5%B8%83%E6%9B%B4%E6%96%B0"}},[v._v("1.2.1. 数据劫持/发布更新")])]),v._v(" "),t("li",[t("a",{attrs:{href:"#122-%E7%BC%96%E8%AF%91"}},[v._v("1.2.2. 编译")])]),v._v(" "),t("li",[t("a",{attrs:{href:"#123-%E8%99%9A%E6%8B%9Fdom"}},[v._v("1.2.3. 虚拟DOM")])])])]),v._v(" "),t("li",[t("a",{attrs:{href:"#13-%E5%AE%9E%E7%8E%B0---%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81"}},[v._v("1.3. 实现 - 数据劫持")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#131-%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E8%AE%A2%E9%98%85%E8%80%85"}},[v._v("1.3.1. 需要一个订阅者")])]),v._v(" "),t("li",[t("a",{attrs:{href:"#132-%E6%95%B4%E4%BD%93%E9%80%BB%E8%BE%91"}},[v._v("1.3.2. 整体逻辑")])])])]),v._v(" "),t("li",[t("a",{attrs:{href:"#14-%E5%AE%9E%E7%8E%B0---%E7%BC%96%E8%AF%91"}},[v._v("1.4. 实现 - 编译")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#141-%E6%9B%B4%E6%96%B0%E6%8C%87%E4%BB%A4"}},[v._v("1.4.1. 更新指令")])])])]),v._v(" "),t("li",[t("a",{attrs:{href:"#15-%E8%99%9A%E6%8B%9Fdom"}},[v._v("1.5. 虚拟DOM")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#151-%E8%99%9A%E6%8B%9Fdom%E7%9A%84---diff%E7%AE%97%E6%B3%95"}},[v._v("1.5.1. 虚拟DOM的 - diff算法")])])])]),v._v(" "),t("li",[t("a",{attrs:{href:"#16-%E9%93%BE%E6%8E%A5"}},[v._v("1.6. 链接")])])])])]),v._v(" "),t("h2",{attrs:{id:"_1-1-kepoints"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-kepoints"}},[v._v("#")]),v._v(" 1.1. Kepoints")]),v._v(" "),t("ol",[t("li",[v._v("数据动态响应 - 数据劫持/发布更新")]),v._v(" "),t("li",[v._v("将"),t("code",[v._v(".vue")]),v._v("文件便以为页面文件(展示出来)")]),v._v(" "),t("li",[v._v("虚拟DOM")])]),v._v(" "),t("p",[t("strong",[v._v("先给出Vue周期图：")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cn.vuejs.org/images/lifecycle.png",alt:"vue周期图"}})]),v._v(" "),t("p",[v._v("以上三个节点发生在"),t("code",[v._v("created and mounted")]),v._v("之间。最后变为我们看到的文件"),t("code",[v._v(".html js(根本没有vue)")]),v._v("。")]),v._v(" "),t("p",[v._v("而"),t("code",[v._v("updated")]),v._v("可能复用的所述"),t("code",[v._v("created and mounted")]),v._v("之间，因为"),t("code",[v._v("updated")]),v._v("更新节点是一个可复用的操作。再"),t("code",[v._v("created and mounted")]),v._v("之间也有涉及。")]),v._v(" "),t("h2",{attrs:{id:"_1-2-前置知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-前置知识"}},[v._v("#")]),v._v(" 1.2. 前置知识")]),v._v(" "),t("h3",{attrs:{id:"_1-2-1-数据劫持-发布更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-数据劫持-发布更新"}},[v._v("#")]),v._v(" 1.2.1. 数据劫持/发布更新")]),v._v(" "),t("p",[t("code",[v._v("vue")]),v._v("做的是将获取数据和更改数据的接口劫持了：")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("setter")]),v._v(" - 就将调用 "),t("strong",[v._v("订阅者队列每个订阅者的更新函数")]),v._v("。")]),v._v(" "),t("li",[t("code",[v._v("getter")]),v._v(" - 先订阅者队列添加订阅者")])]),v._v(" "),t("h3",{attrs:{id:"_1-2-2-编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-编译"}},[v._v("#")]),v._v(" 1.2.2. 编译")]),v._v(" "),t("p",[v._v("初始工程是"),t("code",[v._v(".vue")]),v._v("混合了多个文件。")]),v._v(" "),t("p",[v._v("第一个不需要将每部分提取出来，比如说将"),t("code",[v._v("html")]),v._v("部分拼接。合并为整个"),t("code",[v._v("html")]),v._v("文件。")]),v._v(" "),t("h3",{attrs:{id:"_1-2-3-虚拟dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-虚拟dom"}},[v._v("#")]),v._v(" 1.2.3. 虚拟DOM")]),v._v(" "),t("p",[v._v("在"),t("a",{attrs:{href:"https://github.com/JiangWeixian/JS-Tips/blob/master/docs/HTML/HTML-DOM%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97.md",target:"_blank",rel:"noopener noreferrer"}},[v._v("DOM优化指南"),t("OutboundLink")],1),v._v("提到了，直接操作dom其实效率不高。js数据结构更快一些。")]),v._v(" "),t("p",[v._v("所以将"),t("code",[v._v("html")]),v._v("代码变为"),t("code",[v._v("virtual dom")]),v._v("。实现"),t("code",[v._v("html->virtual dom->html")]),v._v("这样的格式。")]),v._v(" "),t("p",[v._v("在 "),t("strong",[v._v("数据劫持阶段")]),v._v("如果发生数据变动，就先更改"),t("code",[v._v("virtual dom")]),v._v("然后将新的"),t("code",[v._v("new virtual dom")]),v._v("于"),t("code",[v._v("old virtual dom")]),v._v("进行比较。决定是否更新到页面中。")]),v._v(" "),t("p",[v._v("虚拟dom结构一帮含有一些几点基本数据，比如"),t("code",[v._v("tagname key class等等")]),v._v("(只要能够恢复出来元素"),t("code",[v._v("dom")]),v._v("即可)。"),t("strong",[v._v("一般将dom的json格式以及元素dom节点一起保存为"),t("code",[v._v("vnode")])]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"_1-3-实现-数据劫持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-实现-数据劫持"}},[v._v("#")]),v._v(" 1.3. 实现 - 数据劫持")]),v._v(" "),t("blockquote",[t("p",[v._v("数据劫持和发布更新的结合")])]),v._v(" "),t("ol",[t("li",[t("p",[v._v("第一步获取数据，要知道哪些数据是需要劫持的？")]),v._v(" "),t("blockquote",[t("p",[v._v("在vue文件中，有一部分数据叫"),t("code",[v._v("data")]),v._v("。那里面的数据都是需要监听的，"),t("strong",[v._v("注意监听的"),t("code",[v._v("key")]),v._v("部分")])])])]),v._v(" "),t("li",[t("p",[v._v("第二步就是劫持，初始化一个订阅者队列"),t("code",[v._v("deps")])]),v._v(" "),t("blockquote",[t("p",[v._v("和深度复制做法一致。一层层遍历修改每个"),t("code",[v._v("key")]),v._v("的"),t("code",[v._v("setter or getter")]),v._v("。使用的是"),t("code",[v._v("defineProperty")]),v._v("接口函数。")])]),v._v(" "),t("ul",[t("li",[v._v("具体来说就是"),t("code",[v._v("setter")]),v._v(" - 就将调用 "),t("strong",[v._v("订阅者队列每个订阅者的更新函数")]),v._v("。")]),v._v(" "),t("li",[t("code",[v._v("getter")]),v._v(" - 先订阅者队列添加订阅者")])])])]),v._v(" "),t("p",[v._v("以上以观察者部分。见"),t("a",{attrs:{href:"https://github.com/DMQ/mvvm",target:"_blank",rel:"noopener noreferrer"}},[v._v("observer.js"),t("OutboundLink")],1)]),v._v(" "),t("h3",{attrs:{id:"_1-3-1-需要一个订阅者"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-需要一个订阅者"}},[v._v("#")]),v._v(" 1.3.1. 需要一个订阅者")]),v._v(" "),t("blockquote",[t("p",[v._v("每个"),t("code",[v._v("key")]),v._v("都是变量，一个变量对应一个订阅者。")])]),v._v(" "),t("p",[t("code",[v._v("watcher(订阅者)")]),v._v("的"),t("code",[v._v("get")]),v._v("来监听"),t("code",[v._v("key")]),v._v("，操作很惊艳。")]),v._v(" "),t("h3",{attrs:{id:"_1-3-2-整体逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-整体逻辑"}},[v._v("#")]),v._v(" 1.3.2. 整体逻辑")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("observer")]),v._v("观察"),t("code",[v._v("data")]),v._v("数据，设置"),t("code",[v._v("setter and getter")]),v._v("。")]),v._v(" "),t("li",[v._v("维护一个更新"),t("code",[v._v("deps")]),v._v("订阅者队列，只要"),t("code",[v._v("data[key]")]),v._v("(因为前面已经劫持了"),t("code",[v._v("getter")]),v._v(")触发了就添加"),t("code",[v._v("watcher")]),v._v("，并加入"),t("code",[v._v("deps")]),v._v("订阅者队列。")]),v._v(" "),t("li",[v._v("初始化订阅者，"),t("code",[v._v("new watcher")]),v._v("创建订阅者，并"),t("code",[v._v("watcher.get(key)")]),v._v("实现触发"),t("code",[v._v("getter")]),v._v("(这个函数会触发"),t("code",[v._v("data[key]")]),v._v(")以进行数据监听。并将当前"),t("code",[v._v("watcher")]),v._v("加入队列。")])]),v._v(" "),t("p",[t("strong",[v._v("注意1")]),v._v("：第三个步骤目的就是为了将"),t("code",[v._v("observer watcher and 订阅者队列三者分开")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("注意2")]),v._v("：在"),t("code",[v._v("watcher")]),v._v("添加更新的接口函数，就可以实现"),t("code",[v._v("update dom")])]),v._v(" "),t("h2",{attrs:{id:"_1-4-实现-编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-实现-编译"}},[v._v("#")]),v._v(" 1.4. 实现 - 编译")]),v._v(" "),t("blockquote",[t("p",[v._v("以上 "),t("strong",[v._v("实现 - 数据劫持")]),v._v("仅仅实现了监听数据，我们需要知道哪部分dom结构需要这部分数据变化。我们知道"),t("code",[v._v("vue")]),v._v("具有钩子函数，如"),t("code",[v._v("v-model")]),v._v("等等，代表这部分 "),t("strong",[v._v("dom结构")]),v._v(" 是需要"),t("code",[v._v("data")]),v._v("的。")])]),v._v(" "),t("p",[t("strong",[v._v("不同钩子函数对应不同更新节点的方式，创建watcher对象的时候将node和node更新方式加入。")])]),v._v(" "),t("ol",[t("li",[v._v("所以递归解析dom，提取"),t("code",[v._v("attrs")]),v._v("，如果存在钩子函数"),t("code",[v._v("v-model=key")]),v._v("，"),t("strong",[v._v("触发"),t("code",[v._v("data[key]")]),v._v("，创建watcher对象，并加入node和node更新方式")]),v._v("。将该"),t("code",[v._v("watcher")]),v._v("加入"),t("code",[v._v("deps")]),v._v("队列。")]),v._v(" "),t("li",[v._v("同时在页面编译过程中，将"),t("code",[v._v("template")]),v._v("和数据拼接，形成"),t("code",[v._v("html")]),v._v("结构")])]),v._v(" "),t("p",[t("strong",[v._v("注意1：")]),v._v(" 触发watcher-update的时候，由于节点已经在"),t("code",[v._v("wathcer")]),v._v("中，所以只要使用初始化时候的对应更新方式更新节点")]),v._v(" "),t("p",[t("strong",[v._v("注意2：")]),v._v(" watcher的节点只是当前节点而不是整个"),t("code",[v._v("dom")])]),v._v(" "),t("h3",{attrs:{id:"_1-4-1-更新指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-更新指令"}},[v._v("#")]),v._v(" 1.4.1. 更新指令")]),v._v(" "),t("p",[v._v("更新指定node方式可以写出指令集合进行复用")]),v._v(" "),t("h2",{attrs:{id:"_1-5-虚拟dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-虚拟dom"}},[v._v("#")]),v._v(" 1.5. 虚拟DOM")]),v._v(" "),t("blockquote",[t("p",[v._v("改变了将"),t("code",[v._v("template")]),v._v("和数据拼接，形成"),t("code",[v._v("html")]),v._v("结构；以及调用"),t("code",[v._v("update")]),v._v("不再直接更改dom的方式。")])]),v._v(" "),t("p",[v._v("现在变成了以下步骤")]),v._v(" "),t("ul",[t("li",[v._v("解析编译监听同时，生成虚拟"),t("code",[v._v("dom")]),v._v("。构造函数实现虚拟"),t("code",[v._v("dom")]),v._v("到"),t("code",[v._v("html")]),v._v("变换函数。")]),v._v(" "),t("li",[t("code",[v._v("getter")]),v._v("发生数据变动的时候，先生成 "),t("strong",[v._v("新的虚拟DOM，然后将虚拟DOM(new)和虚拟DOM(old)比较，如果不同就要更新真实dom")]),v._v("。")])]),v._v(" "),t("p",[t("strong",[v._v("注意1：")]),v._v(" 由于虚拟dom创建的时候将真实dom和虚拟dom绑定 "),t("strong",[v._v("变为vnode")]),v._v("，如果虚拟dom变动(和旧的比较)就变动保存在"),t("code",[v._v("vnode")]),v._v("的"),t("code",[v._v("el")]),v._v("(真实节点)")]),v._v(" "),t("h3",{attrs:{id:"_1-5-1-虚拟dom的-diff算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-虚拟dom的-diff算法"}},[v._v("#")]),v._v(" 1.5.1. 虚拟DOM的 - diff算法")]),v._v(" "),t("blockquote",[t("p",[v._v("react起始，减少复杂度为O(1)。以下涉及的比较都是针对vnode格式，即虚拟dom和真实dom结合。并且比较的是虚拟dom。")])]),v._v(" "),t("p",[t("strong",[v._v("减少的关键字在于：")]),v._v(" 先比较"),t("code",[v._v("old or new")]),v._v("的"),t("code",[v._v("tagname&class or key")]),v._v("，如果这两个不相等直接进行的是添加以及删除操作。")]),v._v(" "),t("p",[t("strong",[v._v("Step1:")]),v._v(" 如果相等(这部分对其子节点有效，所以是递归比较过程)，相等意味着 "),t("strong",[v._v("同一个标签节点且class一致")]),v._v("，行内比较")]),v._v(" "),t("p",[v._v("在继续比较哪部分变动了，对应不同更改节点方式。：")]),v._v(" "),t("ol",[t("li",[v._v("标签之内的文本")]),v._v(" "),t("li",[v._v("标签属性")]),v._v(" "),t("li",[v._v("行内样式等")])]),v._v(" "),t("p",[t("strong",[v._v("Step2:")]),v._v(" 因为含有子节点，但是需要前置判断，新旧子节点是不是都在。如果任何一个不存在就进行删除插入操作。")]),v._v(" "),t("p",[t("strong",[v._v("Step3:")]),v._v(" 现在子节点都存在于新旧dom结构中，需要比较新旧子节点每一个节点(也就是说如果节点值得比较，需要进一步比较子节点。那么递归下去，先改变最低层节点然后一层层向上)，"),t("strong",[v._v("是否需要递归判断，对于子节点队列判断方式如下图，每个节点判断方式和第一个步骤一致")]),v._v("：")]),v._v(" "),t("p",[t("img",{attrs:{src:e(233),alt:"diff2"}})]),v._v(" "),t("p",[t("strong",[v._v("Step4:")]),v._v(" 其实很好理解为啥这么比较，可以类比 "),t("strong",[v._v("快速排序算法。")])]),v._v(" "),t("ol",[t("li",[v._v("先比较两个队列开始节点")]),v._v(" "),t("li",[v._v("然后是两个末尾")]),v._v(" "),t("li",[v._v("开始和末尾以及末尾和开始 - 这两个就是调整顺序，达到复用节点目的")])]),v._v(" "),t("p",[v._v("以上几种比较方式中任何一种成立如果值得比较，就进一步比较子节点( "),t("strong",[v._v("回到Step1-这就是递归比较方式")]),v._v(")。然后指针左移或者右移。")]),v._v(" "),t("p",[v._v("以上几种方式如果都不满足，那就是创建新节点，删除旧节点。")]),v._v(" "),t("h2",{attrs:{id:"_1-6-链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-链接"}},[v._v("#")]),v._v(" 1.6. 链接")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/DMQ/mvvm",target:"_blank",rel:"noopener noreferrer"}},[v._v("mvvm自实现 - 这篇文章的阅读理解"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/aooy/blog/issues/2",target:"_blank",rel:"noopener noreferrer"}},[v._v("diff"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=o.exports}}]);