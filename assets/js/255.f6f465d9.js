(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{615:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ts-enum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-enum"}},[t._v("#")]),t._v(" TS-Enum")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("DOC")]),t._v("提到的例子并没有在"),a("a",{attrs:{href:""}},[t._v("lib-enum")]),t._v("中得到验证。")]),t._v(" "),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Test "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一般来说就是初始化为数字"),a("code",[t._v("x = 0, y = 1")]),t._v("，"),a("strong",[t._v("而且是递增的")]),t._v("。（同样可以进行数字1的初始化）")]),t._v(" "),a("p",[t._v("当然也可以初始化为字符串，这时候就没有 "),a("strong",[t._v("递增的效果了。")])]),t._v(" "),a("p",[t._v("那么就可以通过"),a("code",[t._v("Test.x")]),t._v("进行使用了，但是即使"),a("code",[t._v("x")]),t._v("此时是"),a("code",[t._v("number")]),t._v("，在使用的使用也必须定义类型了"),a("code",[t._v("Test")]),t._v("而不是"),a("code",[t._v("number")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"enum可以得到什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enum可以得到什么"}},[t._v("#")]),t._v(" enum可以得到什么")]),t._v(" "),a("p",[t._v("如果"),a("code",[t._v("enum")]),t._v("定义")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("那么其实"),a("code",[t._v("status")]),t._v("的输出为")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("0: a\n1: b\na\nb\n")])])]),a("p",[t._v("有的时候想要把"),a("code",[t._v("enum")]),t._v("变为正式真实"),a("code",[t._v("array")]),t._v("。")]),t._v(" "),a("p",[t._v("可以通过"),a("code",[t._v("const arr = Object.keys(status).map(e => status[k])")]),t._v("。此时得到"),a("code",[t._v("[0, 1, a, b]")]),t._v("。之后可以通过"),a("code",[t._v("isString")]),t._v("判断得到我们想要的"),a("code",[t._v("key")]),t._v("值。")])])}),[],!1,null,null,null);s.default=n.exports}}]);